{"ast":null,"code":"var _jsxFileName = \"/home/hari/Desktop/web-dev/React/slackapp/src/components/Auth/Register.js\";\nimport React from 'react';\nimport { Grid, Form, Segment, Button, Header, Message, Icon } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\nimport firebase from '../../firebase';\nimport md5 from 'md5';\n\nclass Register extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      username: '',\n      email: '',\n      password: '',\n      passwordConfirmation: '',\n      errors: [],\n      loading: false,\n      usersRef: firebase.database().ref('users')\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n\n      if (this.isFormValid()) {\n        this.setState({\n          errors: [],\n          loading: true\n        });\n        firebase.auth().createUserWithEmailAndPassword(this.state.email, this.state.password).then(createdUser => {\n          console.log(createdUser);\n          var emailHashToMD5 = md5(createdUser.user.email);\n          createdUser.user.updateProfile({\n            displayName: this.state.username,\n            photoURL: 'https://www.gravatar.com/avatar/' + emailHashToMD5 + '?d=identicon'\n          }).then(() => {\n            this.saveUser(createdUser).then(() => {\n              console.log('User Saved');\n              this.setState({\n                loading: false\n              });\n            });\n          }).catch(err => {\n            console.log(err);\n            this.setState({\n              errors: this.state.errors.concat(err),\n              loading: false\n            });\n          });\n        }).catch(err => {\n          console.error(err);\n          this.setState({\n            errors: this.state.errors.concat(err),\n            loading: false\n          });\n        });\n      }\n    };\n\n    this.handleInputError = (errors, inputName) => {\n      return errors.some(error => error.message.toLowerCase().includes(inputName)) ? \"error\" : \"\";\n    };\n\n    this.isFormValid = () => {\n      let error;\n      let errors = [];\n\n      if (this.isFormEmpty(this.state)) {\n        error = {\n          message: 'Please fill all the fields'\n        };\n        this.setState({\n          errors: errors.concat(error)\n        });\n        return false;\n      } else if (!this.passwordValid(this.state)) {\n        error = {\n          message: 'Password is invalid'\n        };\n        this.setState({\n          errors: errors.concat(error)\n        });\n        return false;\n      } else {\n        this.setState({\n          errors: []\n        });\n        return true;\n      }\n    };\n\n    this.isFormEmpty = ({\n      username,\n      email,\n      password,\n      passwordConfirmation\n    }) => {\n      return !username.length || !email.length || !password.length || !passwordConfirmation.length;\n    };\n\n    this.passwordValid = ({\n      password,\n      passwordConfirmation\n    }) => {\n      if (password.length < 6 || passwordConfirmation.length < 6) {\n        return false;\n      } else if (password !== passwordConfirmation) {\n        return false;\n      } else {\n        return true;\n      }\n    };\n\n    this.saveUser = createdUser => {\n      return this.state.usersRef.child(createdUser.user.uid).set({\n        name: createdUser.user.displayName,\n        avatar: createdUser.user.photoURL\n      });\n    };\n\n    this.displayError = errors => errors.map(i => React.createElement(\"p\", {\n      key: i,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, i.message));\n  }\n\n  render() {\n    const _this$state = this.state,\n          username = _this$state.username,\n          email = _this$state.email,\n          password = _this$state.password,\n          passwordConfirmation = _this$state.passwordConfirmation,\n          errors = _this$state.errors,\n          loading = _this$state.loading;\n    return React.createElement(Grid, {\n      textAlign: \"center\",\n      verticalAlign: \"middle\",\n      className: \"app\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      style: {\n        maxWidth: 450\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(Header, {\n      as: \"h2\",\n      icon: true,\n      color: \"orange\",\n      textAlign: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      name: \"puzzle piece\",\n      color: \"orange\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }), \"Register for ..\"), React.createElement(Form, {\n      size: \"large\",\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(Segment, {\n      stacked: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(Form.Input, {\n      fluid: true,\n      name: \"username\",\n      icon: \"user\",\n      iconPosition: \"left\",\n      placeholder: \"Username\",\n      type: \"text\",\n      onChange: this.handleChange,\n      value: username,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }), React.createElement(Form.Input, {\n      fluid: true,\n      name: \"email\",\n      icon: \"mail\",\n      iconPosition: \"left\",\n      placeholder: \"Email Address\",\n      type: \"text\",\n      onChange: this.handleChange,\n      value: email,\n      className: this.handleInputError(errors, 'email'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }), React.createElement(Form.Input, {\n      fluid: true,\n      name: \"password\",\n      icon: \"lock\",\n      iconPosition: \"left\",\n      placeholder: \"Password\",\n      type: \"password\",\n      onChange: this.handleChange,\n      value: password,\n      className: this.handleInputError(errors, 'password'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }), React.createElement(Form.Input, {\n      name: \"passwordConfirmation\",\n      icon: \"repeat\",\n      iconPosition: \"left\",\n      placeholder: \"Password Confirmation\",\n      type: \"password\",\n      onChange: this.handleChange,\n      value: passwordConfirmation,\n      className: this.handleInputError(errors, 'password'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }), React.createElement(Button, {\n      disabled: loading,\n      className: loading ? 'loading' : '',\n      color: \"orange\",\n      fluid: true,\n      size: \"large\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \"Submit\"), errors.length > 0 && React.createElement(Message, {\n      color: \"red\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, \"Error\"), this.displayError(errors)), React.createElement(Message, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, \"Already have an account ? \", React.createElement(Link, {\n      to: \"/Login\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, \"Login\"))))));\n  }\n\n}\n\nexport default Register;","map":{"version":3,"sources":["/home/hari/Desktop/web-dev/React/slackapp/src/components/Auth/Register.js"],"names":["React","Grid","Form","Segment","Button","Header","Message","Icon","Link","firebase","md5","Register","Component","state","username","email","password","passwordConfirmation","errors","loading","usersRef","database","ref","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","isFormValid","auth","createUserWithEmailAndPassword","then","createdUser","console","log","emailHashToMD5","user","updateProfile","displayName","photoURL","saveUser","catch","err","concat","error","handleInputError","inputName","some","message","toLowerCase","includes","isFormEmpty","passwordValid","length","child","uid","set","avatar","displayError","map","i","render","maxWidth"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Grid, Form, Segment, Button, Header, Message, Icon} from 'semantic-ui-react'\nimport {Link} from 'react-router-dom'\nimport firebase from '../../firebase'\nimport md5 from 'md5'\nclass Register extends React.Component{\n    state = {\n        username: '',\n        email: '',\n        password: '',\n        passwordConfirmation: '',\n        errors: [],\n        loading: false, \n        usersRef: firebase.database().ref('users')\n    };\n\n\n    handleChange = event =>{\n        this.setState({[event.target.name] : event.target.value });\n       \n    };\n\n\n    handleSubmit = event =>{\n        event.preventDefault();\n\n        if(this.isFormValid()){\n            this.setState({errors: [], loading:true})\n            firebase\n                .auth()\n                .createUserWithEmailAndPassword(this.state.email, this.state.password)\n                .then(createdUser =>{\n                    console.log(createdUser)\n                    var emailHashToMD5 = md5(createdUser.user.email)\n                    createdUser.user.updateProfile({\n                        displayName: this.state.username,\n                        photoURL: 'https://www.gravatar.com/avatar/'+emailHashToMD5+'?d=identicon'\n                    })\n                    .then(() => {\n                        this.saveUser(createdUser).then(()=>{\n                            console.log('User Saved')\n                            this.setState({loading: false})\n                        })\n                    })\n                    .catch(err =>{\n                        console.log(err)\n                        this.setState({errors: this.state.errors.concat(err), loading: false}   )\n                    })\n        })\n        .catch(err =>{\n            console.error(err);\n            this.setState({errors: this.state.errors.concat(err), loading: false})\n        }); \n        }\n\n    }\n\n    handleInputError = (errors, inputName) =>{\n        return errors.some(error => \n            error.message.toLowerCase().includes(inputName)\n            )\n                ? \"error\"\n                : \"\"\n    }\n\n    isFormValid = () => {\n        let error ;\n        let errors = [] ;\n        if(this.isFormEmpty(this.state)){\n            error = {message: 'Please fill all the fields'};\n            this.setState({errors: errors.concat(error)});\n            return false;\n        }else if (!this.passwordValid(this.state)){\n            error = {message: 'Password is invalid'};\n            this.setState({errors: errors.concat(error)});\n            return false;\n        }else{\n            this.setState({errors: [] });\n            return true;\n        }\n    }\n\n    isFormEmpty = ({username, email, password, passwordConfirmation}) =>{\n\n        return !username.length || !email.length || !password.length || !passwordConfirmation.length;\n\n    }\n    // isEmailValid = ({email}) => {\n    //     let emailPattern = '^[a-z][a-z0-9_\\\\.]{5,32}@[a-z0-9]{2,}(\\\\.[a-z0-9]{2,4}){1,2}$'\n    //     return email.match(emailPattern);\n    // }\n    passwordValid = ({password, passwordConfirmation}) =>{\n        if(password.length < 6 || passwordConfirmation.length < 6){\n            return false;\n        }else if(password !== passwordConfirmation){\n            return false;\n        }\n        else {\n            return true;\n        }\n    }\n    saveUser = createdUser =>{\n        return this.state.usersRef.child(createdUser.user.uid).set({\n            name: createdUser.user.displayName,\n            avatar: createdUser.user.photoURL\n        })\n    }\n    displayError = errors => errors.map(( i ) => <p key={i}>{i.message }</p>);\n\n    render(){\n       const {username, email, password, passwordConfirmation, errors, loading} = this.state;\n       return(\n           <Grid textAlign=\"center\" verticalAlign=\"middle\" className=\"app\">\n               <Grid.Column style={{maxWidth: 450 }} >\n                    <Header as=\"h2\" icon color =\"orange\" textAlign=\"center\">\n                            <Icon name =\"puzzle piece\" color=\"orange\" />\n                            Register for ..\n                    </Header>\n                    <Form size=\"large\" onSubmit={this.handleSubmit}>\n                            <Segment stacked>\n                                <Form.Input fluid name=\"username\" icon=\"user\" iconPosition=\"left\" \n                                placeholder=\"Username\" type=\"text\" onChange={this.handleChange} value={username} />\n\n                                <Form.Input fluid name=\"email\" icon=\"mail\" iconPosition=\"left\"\n                                placeholder=\"Email Address\" type=\"text\" onChange={this.handleChange} value={email} className={this.handleInputError(errors, 'email') } />\n\n                                <Form.Input fluid name=\"password\" icon=\"lock\" iconPosition=\"left\" \n                                placeholder=\"Password\" type=\"password\" onChange={this.handleChange} value={password} className={this.handleInputError(errors, 'password') }/>\n\n                                <Form.Input name=\"passwordConfirmation\" icon=\"repeat\" iconPosition=\"left\"\n                                placeholder=\"Password Confirmation\" type=\"password\" onChange={this.handleChange} value={passwordConfirmation} className={this.handleInputError(errors, 'password') }/>\n\n                                <Button disabled={loading} className={loading ? 'loading' : ''} color=\"orange\" fluid size=\"large\">Submit</Button>\n                                {errors.length > 0   && (\n                                    <Message color=\"red\">\n                                        <h3>Error</h3>\n            \n                                        {this.displayError(errors)}\n                                    </Message>\n                                )}\n                                \n                                <Message>\n                                    Already have an account ? <Link to=\"/Login\">Login</Link>\n                                </Message>\n                            </Segment>\n                    </Form>\n               </Grid.Column>\n           </Grid>\n       );\n    }\n}\n\nexport default Register ;"]},"metadata":{},"sourceType":"module"}